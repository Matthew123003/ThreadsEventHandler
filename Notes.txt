Synchronized methods are a feature of the Java programming language used to handle synchronization
 in multithreaded applications. They ensure that only one thread can execute a synchronized method
  at a time for a particular instance of an object. This helps prevent race conditions, which can
   occur when multiple threads attempt to modify shared resources simultaneously.

When a method is declared with the synchronized keyword, it acquires an intrinsic lock (also known
 as a monitor) on the instance of the object it belongs to (or on the class object in the case of
 static synchronized methods). The lock is released when the method completes its execution.

Hereâ€™s how synchronized methods work:

Method Declaration: A method is declared as synchronized by adding the synchronized keyword to the
 method declaration.

 Execution: When a thread invokes a synchronized method on an object, it first acquires the intrinsic lock on that
  object. Other threads attempting to invoke another synchronized method on the same object will be blocked until the
   first thread releases the lock by exiting the method.

 Thread Safety: By ensuring that only one thread can execute a synchronized method at a time on a particular object,
  synchronized methods help to ensure that shared resources are accessed in a thread-safe manner.

 Synchronized Blocks: Synchronized blocks can also be used to synchronize a specific section of code within a method,
  rather than synchronizing the entire method:

  Performance Considerations: Synchronized methods can impact performance because they limit concurrency and may
   introduce contention between threads. Therefore, they should be used judiciously and only when necessary.

  Overall, synchronized methods are a basic but powerful way to control access to shared resources in Java, ensuring
   that threads do not interfere with each other when modifying shared data.